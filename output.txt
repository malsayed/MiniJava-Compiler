<CLASS> : class
<ID> : Factorial
<LEFT_BRACE> : {
<PUBLIC> : public
<STATIC> : static
<VOID> : void
<MAIN> : main
<LEFT_PARENTHESIS> : (
<STRING> : String
<LEFT_BRACKET> : [
<RIGHT_BRACKET> : ]
<ID> : a
<RIGHT_PARENTHESIS> : )
<LEFT_BRACE> : {
<PRINT> : System.out.println
<LEFT_PARENTHESIS> : (
<NEW> : new
<ID> : Fac
<LEFT_PARENTHESIS> : (
<RIGHT_PARENTHESIS> : )
<PERIOD> : .
<ID> : ComputeFac
<LEFT_PARENTHESIS> : (
<INTEGER_LITERAL> : 10
<RIGHT_PARENTHESIS> : )
<RIGHT_PARENTHESIS> : )
<RIGHT_BRACE> : }
<RIGHT_BRACE> : }
<CLASS> : class
<ID> : Fac
<LEFT_BRACE> : {
<PUBLIC> : public
<INT> : int
<ID> : ComputeFac
<LEFT_PARENTHESIS> : (
<INT> : int
<ID> : num
<RIGHT_PARENTHESIS> : )
<LEFT_BRACE> : {
<INT> : int
<ID> : num_aux
<SEMICOLON> : ;
<IF> : if
<LEFT_PARENTHESIS> : (
<ID> : num
<LESS_THAN> : <
<INTEGER_LITERAL> : 1
<RIGHT_PARENTHESIS> : )
<ID> : num_aux
<EQUALS> : =
<INTEGER_LITERAL> : 1
<SEMICOLON> : ;
<ELSE> : else
<ID> : num_aux
<EQUALS> : =
<ID> : num
<ASTERISK> : *
<LEFT_PARENTHESIS> : (
<LEFT_PARENTHESIS> : (
<THIS> : this
<PERIOD> : .
<ID> : ComputeFac
<LEFT_PARENTHESIS> : (
<ID> : num
<MINUS> : -
<INTEGER_LITERAL> : 1
<RIGHT_PARENTHESIS> : )
<RIGHT_PARENTHESIS> : )
<RIGHT_PARENTHESIS> : )
<SEMICOLON> : ;
<RETURN> : return
<ID> : num_aux
<SEMICOLON> : ;
<RIGHT_BRACE> : }
<RIGHT_BRACE> : }
